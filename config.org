* Minor settings
** General
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
  (global-linum-mode t)
  (nyan-mode t)
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 128 :width normal :foundry "PfEd" :family "DejaVu Sans Mono")))))
  ;; Disable the splash screen (to enable it agin, replace the t with 0)
  (setq inhibit-splash-screen t)
  ;; Power line
  (require 'powerline)
  (powerline-revert)
  (set-face-attribute 'mode-line nil
                      :foreground "White"
                      :background "Blue"
                      :box nil)
#+end_src
** Org
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
** Parenthesis
#+begin_src emacs-lisp
  ;; autocomplete paired brackets
  (electric-pair-mode 1)
  (load "~/git/org-mode/contrib/lisp/org-effectiveness.el")
  (show-paren-mode 1)
#+end_src
* PDF
#+begin_src emacs-lisp
  (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))

  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  (pdf-tools-install)
  ;; turn off cua so copy works
  (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
#+end_src
* Google translate
#+BEGIN_SRC emacs-lisp
    (use-package google-translate
      :ensure t
      :init)
  (require 'google-translate)
  (require 'google-translate-default-ui)
  (global-set-key "\C-ct" 'google-translate-at-point)
  (global-set-key "\C-cT" 'google-translate-query-translate)
  (global-set-key (kbd "C-c r") 'google-translate-at-point-reverse) (global-set-key (kbd "C-c R") 'google-translate-query-translate-reverse)
  (defun pdf-google-translate()
    (interactive)
    (google-translate-translate
     google-translate-default-source-language
     google-translate-default-target-language
     (pdf-view-kill-ring-save)
     )
    )

  (define-key pdf-view-mode-map (kbd "C-c t") 'pdf-google-translate)

#+END_SRC
* ESS
#+begin_src emacs-lisp
  (use-package ess
    :ensure t
    :init)
  (require 'ess-site)
#+end_src
* Julia
#+begin_src emacs-lisp
  (add-to-list 'load-path "/home/erik/Downloads/julia-emacs-master (1)/julia-emacs-master")
  (require 'julia-mode)

  (add-to-list 'load-path "/home/erik/Downloads/julia-repl-master")
  (require 'julia-repl)
  (add-hook 'julia-mode-hook 'julia-repl-mode) ;; always use minor mode
  (load "/home/erik/.emacs.d/ob-julia-master/ob-julia.el")
#+end_src
* Magit
#+begin_src emacs-lisp
  (setq package-check-signature nil)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
#+end_src
* Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src

* Flyspell
#+begin_src emacs-lisp
  ;;flyspell
  (let ((langs '("english" "deutsch8" "pt_BR")))
    (setq lang-ring (make-ring (length langs)))
    (dolist (elem langs) (ring-insert lang-ring elem)))
  (defun cycle-ispell-languages ()
    (interactive)
    (let ((lang (ring-ref lang-ring -1)))
      (ring-insert lang-ring lang)
      (ispell-change-dictionary lang)))
  (global-set-key [f6] 'cycle-ispell-languages)

  (add-hook 'org-mode-hook 'turn-on-flyspell)
  (add-hook 'LaTeX-mode-hook #'turn-on-flyspell)
#+end_src
* Music
#+begin_src emacs-lisp
  ;;music
  (use-package emms
    :ensure t
    :config
    (require 'emms-setup)
    (require 'emms-player-mpd)
    (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
    (setq emms-seek-seconds 5)
    (setq emms-player-list '(emms-player-mpd))
    (setq emms-info-functions '(emms-info-mpd))
    (setq emms-player-mpd-server-name "localhost")
    (setq emms-player-mpd-server-port "6601"))
  (setq mpc-host "localhost:6601")
  (defun mpd/start-music-daemon ()
    "Start MPD, connects to it and syncs the metadata cache."
    (interactive)
    (shell-command "mpd")
    (mpd/update-database)
    (emms-player-mpd-connect)
    (emms-cache-set-from-mpd-all)
    (message "MPD Started!"))
  (global-set-key (kbd "s-c") 'mpd/start-music-daemon)
  (defun mpd/kill-music-daemon ()
    "Stops playback and kill the music daemon."
    (interactive)
    (emms-stop)
    (call-process "killall" nil nil nil "mpd")
    (message "MPD Killed!"))
  (global-set-key (kbd "s-k") 'mpd/kill-music-daemon)
  (defun mpd/update-database ()
    "Updates the MPD database synchronously."
    (interactive)
    (call-process "mpc" nil nil nil "update")
    (message "MPD Database Updated!"))
  (global-set-key (kbd "s-u") 'mpd/update-database)

#+end_src
* Latex
#+begin_src emacs-lisp
  ;; latex
  (setq auto-mode-alist
        (cons '("\\.m$" . octave-mode) auto-mode-alist))
  (setq TeX-parse-self t) ; Enable parse on load.
  (setq TeX-auto-save t) ; Enable parse on save.
  (setq langtool-language-tool-jar "/home/erik/Downloads/LanguageTool-4.5/languagetool-commandline.jar")
  (require 'langtool)
  (setq langtool-mother-tongue "pt-BR")
  (global-set-key "\C-x4w" 'langtool-check)
  (global-set-key "\C-x4W" 'langtool-check-done)
  (global-set-key "\C-x4l" 'langtool-switch-default-language)
  (global-set-key "\C-x44" 'langtool-show-message-at-point)
  (global-set-key "\C-x4c" 'langtool-correct-buffer)
  (setq-default TeX-master nil) ; Query for master file
  (require 'reftex)
  ;; Turn on RefTeX in AUCTeX
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-ref-macro-prompt nil)
  ;; Activate nice interface between RefTeX and AUCTeX
  (setq reftex-plug-into-AUCTeX t)
  (use-package latex-preview-pane
    :ensure t)
#+end_src
* Buffers, IDO, M-x
** Enable IDO
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** IDO-Vertial
#+begin_src emacs-lisp
(use-package ido-vertical-mode
:ensure t
:init
(ido-vertical-mode 1))
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** iBuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
* Config edit/reload
** edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* Switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "g" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src
* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard '((recents .10)))
    (setq dashboard-banner-logo-title "Hello Erik"))
#+end_src
* Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    :init)

  ;; (with-eval-after-load 'company
  ;;   (define-key company-active-map (kbd "C-n") #'company-select-next)
  ;;   (define-key company-active-map (kbd "C-p") #'company-select-previous))

  ;; (use-package company-irony
  ;;   :ensure t
  ;;   :config
  ;;   (require 'company)
  ;;   (add-to-list 'company-backends 'company-irony))

  ;; (use-package irony
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'c++-mode-hook 'irony-mode)
  ;;   (add-hook 'c-mode-hook 'irony-mode)
  ;;   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;; (with-eval-after-load 'company
  ;;   (add-hook 'c++-mode-hook 'company-mode)
  ;;   (add-hook 'c-mode-hook 'company-mode))
#+end_src

* Folding 
#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'set-selective-display-dlw)

  (defun set-selective-display-dlw (&optional level)
  "Fold text indented same of more than the cursor.
  If level is set, set the indent level to LEVEL.
  If 'selective-display' is already set to LEVEL, clicking
  F5 again will unset 'selective-display' by setting it to 0."
    (interactive "P")
    (if (eq selective-display (1+ (current-column)))
        (set-selective-display 0)
      (set-selective-display (or level (1+ (current-column))))))
#+end_src
* Twittern
#+begin_src emacs-lisp
  (use-package twittering-mode
    :ensure t)
#+end_src
* Org-Latex
#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+end_src
